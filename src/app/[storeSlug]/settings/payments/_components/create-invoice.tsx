"use client";

import { useState } from "react";
import { Plus, X } from "lucide-react";
import { useForm } from "react-hook-form";

import { toastService } from "@dreamwalker-studios/toasts";
import { zodResolver } from "@hookform/resolvers/zod";

import type { DraftOrderFormData } from "~/lib/validators/order";
import type { Customer } from "~/types/customer";
import { draftOrderFormValidator } from "~/lib/validators/order";
import { api } from "~/trpc/react";
import { Button } from "~/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";
import { Form } from "~/components/ui/form";
import { Separator } from "~/components/ui/separator";
import { CurrencyFormField } from "~/components/input/currency-form-field";
import { InputFormField } from "~/components/input/input-form-field";
import { NumericFormField } from "~/components/input/numeric-form-field";
import { SelectFormField } from "~/components/input/select-form-field";
import { CustomerFormField } from "~/app/[storeSlug]/(orders)/_components/customer-form-field";

type Props = {
  storeId: string;
  storeSlug: string;
};

export function CreateInvoice({ storeId, storeSlug }: Props) {
  const [invoiceUrl, setInvoiceUrl] = useState<string>("");

  const { data: products } = api.product.getAll.useQuery({ storeId });
  const { data: customers } = api.customer.getAll.useQuery(storeId);
  const createInvoice = api.payment.createInvoice.useMutation({
    onSuccess: ({ data, message }) => {
      setInvoiceUrl(data.invoiceUrl);
      toastService.success(message);
    },
    onError: (error) => {
      toastService.error(error.message);
    },
  });

  const form = useForm<DraftOrderFormData>({
    resolver: zodResolver(draftOrderFormValidator),
    defaultValues: {
      orderItems: [],
      customer: {
        id: "",
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        addresses: [],
        ordersCount: 0,
      },
      email: "",
      phone: "",
      shippingAddressId: undefined,
      billingAddressId: undefined,
      shippingAddress: undefined,
      billingAddress: undefined,
      discountInCents: 0,
      discountReason: "",
      discountType: "amount",
      isTaxExempt: false,
      tags: [],
      notes: "",
      productRequestId: undefined,
    },
  });

  const items = form.watch("orderItems");

  const handleAddItem = () => {
    if (items.length >= 20) {
      toastService.error("You can only add up to 20 items to an invoice");
      return;
    }
    form.setValue("orderItems", [
      ...items,
      {
        id: crypto.randomUUID(),
        name: "",
        description: "",
        unitPriceInCents: 0,
        quantity: 1,
        totalPriceInCents: 0,
        isPhysical: false,
        isTaxable: true,
        discountReason: "",
        discountType: "amount",
        discountInCents: 0,
        productId: undefined,
        variantId: undefined,
        product: undefined,
      },
    ]);
  };

  const handleRemoveItem = (index: number) => {
    form.setValue(
      "orderItems",
      items.filter((_, i) => i !== index),
    );
  };

  const handleVariantSelect = (index: number, variantId: string) => {
    const variant = products
      ?.flatMap((p) => p.variants)
      .find((v) => v.id === variantId);
    if (variant) {
      form.setValue(`orderItems.${index}.name`, variant.name);
      form.setValue(
        `orderItems.${index}.unitPriceInCents`,
        variant.priceInCents,
      );
      form.setValue(
        `orderItems.${index}.totalPriceInCents`,
        variant.priceInCents,
      );
      form.setValue(`orderItems.${index}.variantId`, variant.id);
      form.setValue(`orderItems.${index}.productId`, variant.productId);
    }
  };

  const onSubmit = async (data: DraftOrderFormData) => {
    const customer = data.customer;
    if (!customer?.id) {
      toastService.error("Please select a customer");
      return;
    }

    if (data.orderItems.length === 0) {
      toastService.error("Please add at least one item to create an invoice");
      return;
    }

    // Validate all required fields are set
    const invalidItems = data.orderItems.filter(
      (item) => !item.name || !item.unitPriceInCents || !item.quantity,
    );
    if (invalidItems.length > 0) {
      toastService.error("Please fill in all required fields for each item");
      return;
    }

    createInvoice.mutate({
      items: data.orderItems.map((item) => ({
        name: item.name,
        amountInCents: item.unitPriceInCents,
        quantity: item.quantity,
        variantId: item.variantId ?? undefined,
      })),
      email: customer.email,
      orderId: "", // This will be generated by the server
      storeId,
    });
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <div className="space-y-4">
          <div className="space-y-4 rounded-lg border p-4">
            <h3 className="font-medium">Customer</h3>
            <CustomerFormField
              customers={(customers as Customer[]) ?? []}
              form={form}
            />
          </div>

          {items.map((item, index) => (
            <div key={index} className="space-y-4 rounded-lg border p-4">
              <div className="flex items-center justify-between">
                <h3 className="font-medium">Item {index + 1}</h3>
                <Button
                  variant="ghost"
                  size="icon"
                  type="button"
                  onClick={() => handleRemoveItem(index)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>

              <div className="grid gap-4">
                <SelectFormField
                  form={form}
                  name={`orderItems.${index}.variantId`}
                  label="Select Product"
                  placeholder="Select a product"
                  onValueChange={(value) => handleVariantSelect(index, value)}
                  values={[
                    ...(products?.map((product) => ({
                      value: product.id,
                      label: product.name,
                      isDisabled: true,
                    })) ?? []),
                    ...(products?.flatMap((product) =>
                      product.variants.map((variant) => ({
                        value: variant.id,
                        label: `${product.name} - ${variant.name}`,
                      })),
                    ) ?? []),
                  ]}
                />

                <InputFormField
                  form={form}
                  name={`orderItems.${index}.name`}
                  label="Item Name"
                  placeholder="Enter item name"
                />

                <CurrencyFormField
                  form={form}
                  name={`orderItems.${index}.unitPriceInCents`}
                  label="Amount (in cents)"
                  placeholder="Enter amount in cents"
                />

                <NumericFormField
                  form={form}
                  name={`orderItems.${index}.quantity`}
                  label="Quantity"
                  min={1}
                />
              </div>
            </div>
          ))}

          <Button
            type="button"
            variant="outline"
            onClick={handleAddItem}
            className="w-full"
            disabled={items.length >= 20}
          >
            <Plus className="mr-2 h-4 w-4" />
            Add Item
          </Button>

          <Separator />

          <Button
            type="submit"
            className="w-full"
            disabled={
              createInvoice.isPending ||
              items.length === 0 ||
              !form.getValues("customer.id")
            }
          >
            {createInvoice.isPending ? "Creating..." : "Create Invoice"}
          </Button>
        </div>

        {invoiceUrl && (
          <Card>
            <CardHeader>
              <CardTitle>Invoice</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="rounded-md bg-gray-100 p-4">
                  <p className="font-mono text-sm break-all">{invoiceUrl}</p>
                </div>
                <Button
                  type="button"
                  variant="outline"
                  className="w-full"
                  onClick={() => {
                    void navigator.clipboard.writeText(invoiceUrl);
                    toastService.success("Invoice URL copied to clipboard");
                  }}
                >
                  Copy URL
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </form>
    </Form>
  );
}
